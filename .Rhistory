## functions do
## Write a short comment describing this function
## Extras :
##  Create a sample matrix:   mat <- replicate(y, rnorm(y)) ] where y is the x&y dimension of the matrix
## Goals
## 1. Set the values in an invertible matrix
## 2. Get the values from the matrix
## 3. Set the values in the inverse matrix
## 4. Get the values from the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
## initializes the inverse property of the function
i <- NULL
## sub function to set the matrix
set <- function(m) {
x <<- m
i <<- NULL
}
## sub function to get the matrix
get <- function() x
## sub function to set the inverse of the matrix
setInverse <- function(i) {
i <<- inverse
}
## sub function to get the inverse of the matrix
getInverse <- function() i
## Return a list of the sub functions
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
y <- x$get()
i <- solve(y)
x$setInverse(i)
i
}
cacheSolve(x)
x$get()
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## Extras :
##  Create a sample matrix:   mat <- replicate(y, rnorm(y)) ] where y is the x&y dimension of the matrix
## test the script
##  x <-makeCacheMatrix()
##  mat <- replicate(3, rnorm(3))
##  x$set(mat)
##  x$get()
##  cacheSolve(x)
##  cacheSolve(x)
##
## makeCacheMatrix containes the functions to:
## 1. Set the values in a matrix
## 2. Get the values from the matrix
## 3. Set the values in the inverse matrix
## 4. Get the values from the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
## initializes the inverse property of the function
i <- NULL
## sub function to set the matrix
set <- function(m) {
x <<- m
i <<- NULL
}
## sub function to get the matrix
get <- function() x
## sub function to set the inverse of the matrix
setInverse <- function(i) {
i <<- inverse
}
## sub function to get the inverse of the matrix
getInverse <- function() i
## Return a list of the sub functions
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
## cacheSolve returns the invers of the matrix set in makeCacheMatrix  (the function assumes an invertible matrix)
## 1. First it checks to see if the inverse has already been calculated, if it has then it returns the stored value.
## 2. If the inverse has not already been calculated, then it computes the value and sets the cache
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
y <- x$get()
i <- solve(y)
x$setInverse(i)
i
}
x <-makeCacheMatrix()
x
mat <- replicate(3, rnorm(3))
mat
x$set(mat)
x$get()
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## Extras :
##  Create a sample matrix:   mat <- replicate(y, rnorm(y)) ] where y is the x&y dimension of the matrix
## test the script
##  x <-makeCacheMatrix()
##  mat <- replicate(3, rnorm(3))
##  x$set(mat)
##  x$get()
##  cacheSolve(x)
##  cacheSolve(x)
##
## makeCacheMatrix containes the functions to:
## 1. Set the values in a matrix
## 2. Get the values from the matrix
## 3. Set the values in the inverse matrix
## 4. Get the values from the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
## initializes the inverse property of the function
i <- NULL
## sub function to set the matrix
set <- function(m) {
x <<- m
i <<- NULL
}
## sub function to get the matrix
get <- function() x
## sub function to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## sub function to get the inverse of the matrix
getInverse <- function() i
## Return a list of the sub functions
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
## cacheSolve returns the invers of the matrix set in makeCacheMatrix  (the function assumes an invertible matrix)
## 1. First it checks to see if the inverse has already been calculated, if it has then it returns the stored value.
## 2. If the inverse has not already been calculated, then it computes the value and sets the cache
cacheSolve <- function(x, ...) {
i <- x$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
y <- x$get()
i <- solve(y)
x$setInverse(i)
i
}
x <-makeCacheMatrix()
mat <- replicate(3, rnorm(3))
mat
x$set(mat)
x$get()
cacheSolve(x)
cacheSolve(x)
library(httr)
getwd()
setwd("D:/dev/Tutorials/Coursera/gcd/week3")
getwd()
dir()
library(httr)
siteurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvdata <- "ss06hid.csv"
download.file(siteurl, csvdata, method="curl")
data <- read.csv(csvdata)
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
library(httr)
siteurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvdata <- "ss06hid.csv"
download.file(siteurl, csvdata, method="curl")
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
library(httr)
siteurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvdata <- "ss06hid.csv"
download.file(siteurl, csvdata, method="curl")
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
library(httr)
siteurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvdata <- "getdata-data-ss06hid.csv"
download.file(siteurl, csvdata, method="curl")
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
library(httr)
siteurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvdata <- "getdata-data-ss06hid.csv"
download.file(siteurl, csvdata, method="curl")
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
install.package("RCurl")
install.packages("RCurl")
install.packages("url")
install.packages("curl")
library(httr)
siteurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvdata <- "getdata-data-ss06hid.csv"
download.file(siteurl, csvdata, method="curl")
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
csvfile <- "ss06hid.csvc
c
:;
clear
clear()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
<- "ss06hid.csv"
csvfile <- "ss06hid.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvfile <- "ss06hid.csv"
download.file(siteurl, csvfile, method="curl")
download.file(fileUrl, csvfile, method="curl")
download.file(fileUrl, csvfile)
library(httr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvfile <- "ss06hid.csv"
download.file(fileUrl, csvfile)
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
3-1_result <- which(logical_vec)[1:3]
3-1_result
library(httr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvfile <- "ss06hid.csv"
download.file(fileUrl, csvfile)
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
result_3_1 <- which(logical_vec)[1:3]
result_3_1
result_3_1 <- which(agricultureLogical)[1:3]
data
which(agricultureLogical)[1:3]
result_3_1
install.packages("jpeg")
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
jpgFile <- "instructor.jpg"
download.file(fileUrl, jpgFile)
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
jpgFile <- "instructor.jpg"
download.file(fileUrl, jpgFile)
photo <- readJPEG(jpgFile, native = TRUE)
quantile(photo)
#Question 2
#Using the jpeg package read in the following picture of your instructor into R
#https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
#Use the parameter native=TRUE. What are the 30th and 80th quantiles of the resulting data? (some Linux systems may produce an answer 638 different for the 30th quantile)
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
jpgFile <- "instructor.jpg"
download.file(fileUrl, jpgFile)
photo <- readJPEG(jpgFile, native = TRUE)
quantile(photo, probs = c(0.3, 0.8))
#Question 2
#Using the jpeg package read in the following picture of your instructor into R
#https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg
#Use the parameter native=TRUE. What are the 30th and 80th quantiles of the resulting data? (some Linux systems may produce an answer 638 different for the 30th quantile)
library(jpeg)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
jpgFile <- "instructor.jpg"
download.file(fileUrl, jpgFile)
photo <- readJPEG(jpgFile, native = TRUE)
result_3_2 <- quantile(photo, probs = c(0.3, 0.8))
result_3_2
photo <- readJPEG(jpgFile, native = TRUE)
result_3_2 <- quantile(photo, probs = c(0.3, 0.8))
result_3_2
library(httr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
csvfile <- "ss06hid.csv"
download.file(fileUrl, csvfile)
data <- read.csv("ss06hid.csv")
agricultureLogical <- data$ACR==3 & data$AGS==6
result_3_1 <- which(agricultureLogical)[1:3]
result_3_1
library(data.table)
fileUrl1 <- "http://data.worldbank.org/data-catalog/GDP-ranking-table"
csvFile1 <- "gdp.csv"
fileUrl2 <- "http://data.worldbank.org/data-catalog/ed-stats"
csvFile2 <- "ed.csv"
download.file(fileUrl1, csvFile1)
download.file(fileUrl2, csvFile2)
library(data.table)
fileUrl1 <- "http://data.worldbank.org/data-catalog/GDP-ranking-table"
htmlFile1 <- "gdp.csv"
fileUrl2 <- "http://data.worldbank.org/data-catalog/ed-stats"
htmlFile2 <- "ed.csv"
download.file(fileUrl1, htmlFile1)
download.file(fileUrl2, htmlFile2)
library(data.table)
fileUrl1 <- "http://data.worldbank.org/data-catalog/GDP-ranking-table"
htmlFile1 <- "gdp.html"
fileUrl2 <- "http://data.worldbank.org/data-catalog/ed-stats"
htmlFile2 <- "ed.html"
download.file(fileUrl1, htmlFile1)
download.file(fileUrl2, htmlFile2)
htmlFile1
library(data.table)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
csvFile1 <- "gdp.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
csvFile2 <- "ed.csv"
download.file(fileUrl1, csvFile1)
download.file(fileUrl2, csvFile2)
library(data.table)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
csvFile1 <- "gdp.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
csvFile2 <- "ed.csv"
download.file(fileUrl1, csvFile1)
download.file(fileUrl2, csvFile2)
GDP <- data.table(read.csv(csvFile1))
GDP
GDP <- data.table(read.csv(csvFile1, skip=4))
GDP
read.csv(csvFile1)
read.csv(csvFile1, skip=4,nrows=200)
read.csv(csvFile1, skip=4,nrows=191)
read.csv(csvFile1, skip=4,nrows=190)
GDP <- data.table(read.csv(csvFile1, skip=4 nrows=190))
GDP
GDP
GDP <- data.table(read.csv(csvFile1, skip=4 nrows=190))
GDP <- data.table(read.csv(csvFile1, skip=4, nrows=190))
GDP
ED <- data.table(read.csv(csvFile2))
ED
GDP
GDP <- GDP[X != ""]
GDP
GDP <- data.table(read.csv(csvFile1, skip=4, nrows=190))
ED <- data.table(read.csv(csvFile2))
GDP <- GDP[X != ""]
GDP <- GDP[, list(X, X.1, X.3, C.4)]
setnames(GDP, c("X","X.1","X.3","X.4"), c("CountryCode","rankingGDP","Long.Name","GDP"))
data <- merge(GDP,ED,all=TRUE, by =c("CountryCode"))
sum(!is.na(unique(data$rankingGDP)))
answer_3_3 <- data[order(rankingGDP, decreasing= TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
answer_3_3
# Question 3
# Load the Gross Domestic Product data for the 190 ranked countries in this data set:
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv
# Load the educational data from this data set:
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv
#Match the data based on the country shortcode. How many of the IDs match? Sort the data frame in descending order by GDP rank (so United States is last). What is the 13th country in the resulting data frame?
# Original data sources:
# http://data.worldbank.org/data-catalog/GDP-ranking-table
# http://data.worldbank.org/data-catalog/ed-stats
library(data.table)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
csvFile1 <- "gdp.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
csvFile2 <- "ed.csv"
download.file(fileUrl1, csvFile1)
download.file(fileUrl2, csvFile2)
GDP <- data.table(read.csv(csvFile1, skip=4, nrows=191))
ED <- data.table(read.csv(csvFile2))
GDP <- GDP[X != ""]
GDP <- GDP[, list(X, X.1, X.3, C.4)]
setnames(GDP, c("X","X.1","X.3","X.4"), c("CountryCode","rankingGDP","Long.Name","GDP"))
data <- merge(GDP,ED,all=TRUE, by =c("CountryCode"))
sum(!is.na(unique(data$rankingGDP)))
answer_3_3 <- data[order(rankingGDP, decreasing= TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
answer_3_3
answer_3_3_1 <- sum(!is.na(unique(data$rankingGDP)))
answer_3_3_2 <- data[order(rankingGDP, decreasing= TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
answer_3_3_1
answer_3_3_2
answer_3_4 <- data[, mean(rankingGDP, na.rm = TRUE), by = Incmoe.Group]
answer_3_4
answer_3_4 <- data[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
answer_3_4
qcuts <- quantile(data$rankingGDP, probs = seq(0, 1, 0.2), na.rm= TRUE)
data$quantileGDP <- cut(data$rankginGDP, breaks = qcuts)
answer_3_5 <- data[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
answer_3_5
breaks <- quantile(data$rankingGDP, probs = seq(0, 1, 0.2), na.rm= TRUE)
data$quantileGDP <- cut(data$rankginGDP, breaks = breaks)
answer_3_5 <- data[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
answer_3_5
breaks
breaks <- quantile(data$rankingGDP, probs = seq(0, 1, 0.2), na.rm= TRUE)
data$quantileGDP <- cut(data$rankginGDP, breaks = breaks)
data$quantileGDP <- cut(data$rankingGDP, breaks = breaks)
answer_3_5 <- data[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
answer_3_5
View(answer_3_5)
breaks
setwd("D:/dev/Tutorials/Coursera/gcd/proj")
getwd()
ls
ls()
dir()
if(!file.exists("./data")){dir.create("./data")}
dataFolder <- "./data"
if(!file.exists(dataFolder)){dir.create(dataFolder)}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "./data/Dataset.zip"
unzip(zipfile=fileName, exdir=dataFolder)
dataFolder
dataFolder, "/Dataset.zip"
(dataFolder, "/Dataset.zip")
paste(dataFolder, "/Dataset.zip")
paste(dataFolder, "/Dataset.zip", sep="")
fileName <- paste(dataFolder, "/Dataset.zip", sep="")
fileName
dataPath <- file.path(dataFolder, "UCI HAR Dataset")
files <- list.files(dataPath, recursive=TRUE)
files
actDataTest  <- read.table(file.path(dataPath, "test", "y_test.txt"), header=FALSE)
actDataTrain <- read.table(file.path(dataPath, "train", "y_train.txt"), header=FALSE)
# FEATURES
featDataTest  <- read.table(file.path(dataPath, "test", "X_test.txt"), header=FALSE)
featDataTrain <- read.table(file.path(dataPath, "train", "X_train.txt"), header=FALSE)
# SUBJECT
subjDataTest  <- read.table(file.path(dataPath, "test", "y_test.txt"), header=FALSE)
subjDataTrain <- read.table(file.path(dataPath, "train", "y_train.txt"), header=FALSE)
dataAct <- rbind(actDataTrain, actDataTest)
dataFeat <- rbind(featDataTrain, feateDataTest)
dataSubj <- rbind(subjDataTrain, subgDataTest)
dataFeat <- rbind(featDataTrain, featDataTest)
dataSubj <- rbind(subjDataTrain, subjDataTest)
names(dataSubj) <- c("subject")
names(dataAct) <- c("activity")
dataFeatNames <- read.table(file.path(dataPath, "features.txt"), head= FALSE)
names(dataFeat) <- dataFeatNames$V2
dataMerged <- cbind(dataSubj, dataAct)
data <- cbind(dataFeat, dataMerged)
subdataFeatNames <- dataFeatNames$V2[grep("mean\\(\\|std\\(\\", dataFeatNames$V2)]
subdataFeatNames <- dataFeatNames$V2[grep("mean\(\|std\(\", dataFeatNames$V2)]
View(dataFeatNames)
subdataFeatNames <- dataFeatNames$V2[grep('mean\\)(\\|std\\(\\)', dataFeatNames$V2)]
subdataFeatNames <- dataFeatNames$V2[grep('mean\\(\\)|std\\(\\)', dataFeatNames$V2)]
selNames <- c(as.character(subdataFeatNames), "subject", "activity")
data <- subset(data, select= selNames)
data
str(Data)
str(data)
actLabels <- read.table(file.path(dataPath, "activity_lables.txt"), header= FALSE)
actLabels <- read.table(file.path(dataPath, "activity_labels.txt"), header= FALSE)
actLabels
head(data$activity,30)
factor(data$V1, lables= actLabels)
factor(data, lables= actLabels)
factor(data, levels=actLabels$V1 lables= actLabels$V2)
factor(data, levels=actLabels$V1, lables= actLabels$V2)
actLabels <- read.table(file.path(dataPath, "activity_labels.txt"), header= FALSE, colClasses="character")
actLabels
factor(data$V1, levels=actLabels$V1, lables= actLabels$V2)
factor(data$V1, levels=actLabels$V1)
factor(data$V1, levels=actLabels$V2)
factor(data$V1, levels=actLabels$V1, labels= actLabels$V2)
data
data$activity
factor(data$activity, levels=actLabels$V1, labels= actLabels$V2)
data$activity
data$activity <- factor(data$activity, levels=actLabels$V1, labels= actLabels$V2)
head(data$activity,30)
data
names(data)
names(data) <- gsub("^t", "time", names(data))
names(data) <- gsub("^f", "frequency", names(data))
names(data) <- gsub("Mag", "Magnitude", names(data))
names(data) <- gsub("Acc", "Accelerometer", names(data))
names(data) <- gsub("Gyro", "Gyroscope", names(data))
names(data) <- gsub("BodyBody", "Body", names(data))
names(data)
install.packages("plyr")
library(plyr)
library(plyr)
data2 <- aggregate(. ~subject + activity, data, mean)
data2 <- data2[order(data2$subject,data2$activity),]
write.table(data2, file= "tidydata.txt", row.name= FALSE)
data2
write.table(data2, file= "tidydata.txt", row.names= FALSE)
write.table(data2, file= "tidydata.txt", row.name= FALSE)
data2
head(data2)
write.table(data2, file= "tidydata.txt", sep=",", row.names= FALSE)
install.packages("knitr")
library(knitr)
knit2html("codebook.md")
knit2html("codebook.rmd")
knit2html("codebook.rmd");
knit2html("codebook.Rmd");
names(data) <- gsub("std()", "STD", names(data))
names(data) <- gsub("mean()", "MEAN", names(data))
library(plyr)
data2 <- aggregate(. ~subject + activity, data, mean)
data2 <- data2[order(data2$subject,data2$activity),]
write.table(data2, file= "tidydata.txt", sep=",", row.names= FALSE)
knit2html("codebook.Rmd");
knit2html("codebook.Rmd");
